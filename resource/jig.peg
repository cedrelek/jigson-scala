/**
 * JiG grammar
 */

{
  var fs = require('fs');
  var _ = require('lodash');
  var Defined = {};

  function include(input) {
    var match;
    var reginc =
      /(?:^|[ \t]+)!(?:inc|include) [ \t]*"([^"\\]*(?:\\.[^"\\]*)*)"/gim;
    while((match = reginc.exec(input))) {
      var filename = match[1];
      if(!fs.existsSync(filename)) {
        throw new Error(filename + ': file not found\n');
      }
      var content = fs.readFileSync(filename, 'utf-8');
      input = input.replace(new RegExp(match[0], 'g'), content);
    }
    return input;
  }
}

start
  = & {
    input = include(input);
    return true;
  } root:(object / array) {
    return root;
  }
  / ws declarations:declaration* {
    return _.reduce(declarations, _.merge);
  }

EOL = [\r\n] {}
space = [ \t]
comma = [,;]
ws "whitespace" = (EOL / space / comment / lcomment)* {}

object_start = ws '{' ws {}
object_end = ws '}' ws {}

array_start = ws [(\[] ws {}
array_end = ws [)\]] ws {}

lcomment_start = '//' / '#' / '--' {}
lcomment_end = EOL

comment_start = '/*' / '"""' / '{-' / '%{' {}
comment_end = '*/' / '"""' / '-}' / '%}' {}

separator "separator" = space* [=:]? space* {}

comment "comment"
  = comment_start (!comment_end .)* comment_end

lcomment "comment"
  = lcomment_start (!lcomment_end .)*

declaration
  = key:key separator value:types ws {
    var rs = Defined;
    if(typeof key === 'object' && key instanceof Array) {
      rs = _.set(rs, key, value);
      _.merge(Defined, rs);
    }
    else if(typeof key === 'string') {
      rs = _.object([key], [value]);
      Defined[key] = value;
    }
    return rs;
  }

types
  = true
  / false
  / null
  / string
  / number
  / object
  / reference
  / array

value
  = value:types ws (comma ws)? {
    return value;
  }

key
  = dotted_key
  / simple_key

simple_key
  = reference
  / key:[a-z0-9@_\-]i+ {
    return key.join('');
  }
  / string

dotted_key_part
  = key:simple_key '.' {
    return key;
  }

dotted_key
  = first:simple_key '.' next:(dotted_key_part)* last:simple_key {
    return [first].concat(next, [last]);
  }

reference "@reference"
  = "@" ref:(dotted_key / simple_key) {
    var ptr = Defined;
    if(!(ref instanceof Array)) {
      if(!ptr[ref]) {
        throw new Error('"' + ref + '" is not defined.');
      }
      return ptr[ref];
     }

    ref.forEach(function(k) {
      if(!ptr[k]) {
        throw new Error('"' + ref.join('.') + '" is not defined.');
      }
      ptr = ptr[k];
    });
    return ptr;
  }

object_item
  = key:key separator value:value {
    if(typeof key === 'object' && key instanceof Array) {
     return _.set({}, key, value);
    }
    return _.object([key.toString()], [value]);
  }
  / ws ref:(reference) ws (comma ws)? {
    return ref;
  }

object
  = object_start items:(object_item)* object_end {
    return _.transform(_.flatten(items), _.merge, {});
  }

array_item
  = value
  / ws ref:(reference) ws (comma ws)? {
    return ref;
  }

array =
  array_start values:array_item* array_end {
    return values;
  }

/**
 * Ripped from PEGjs JSON parser
 * https://github.com/pegjs/pegjs/blob/master/examples/json.pegjs
 */

true "boolean"
  = "true" { return true; }
false "boolean"
  = "false" { return false; }
null "null"
  = "null" { return null; }

/* ----- 6. Numbers ----- */

number "number"
  = minus? int frac? exp? { return parseFloat(text()); }

decimal_point = "."
digit1_9      = [1-9]
e             = [eE]
exp           = e (minus / plus)? DIGIT+
frac          = decimal_point DIGIT+
int           = zero / (digit1_9 DIGIT*)
minus         = "-"
plus          = "+"
zero          = "0"

/* ----- 7. Strings ----- */

string "string"
  = quotation_mark chars:char* quotation_mark { return chars.join(""); }

char
  = unescaped
  / escape
    sequence:(

        '"'
      / "\\"
      / "/"
      / "b" { return "\b"; }
      / "f" { return "\f"; }
      / "n" { return "\n"; }
      / "r" { return "\r"; }
      / "t" { return "\t"; }
      / "u" digits:$(HEXDIG HEXDIG HEXDIG HEXDIG) {
          return String.fromCharCode(parseInt(digits, 16));
        }
    )
    { return sequence; }

escape         = "\\"
quotation_mark = '"'
unescaped      = [\x20-\x21\x23-\x5B\x5D-\u10FFFF]

/* ----- Core ABNF Rules ----- */

/* See RFC 4234, Appendix B (http://tools.ietf.org/html/rfc4627). */
DIGIT  = [0-9]
HEXDIG = [0-9a-f]i